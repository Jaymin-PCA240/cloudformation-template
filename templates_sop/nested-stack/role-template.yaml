AWSTemplateFormatVersion: "2010-09-09"
Description: IAM Roles Nested Stack

Parameters:
  GitHubConnectionArn:
    Type: String
    Description: ARN of existing CodeStar GitHub connection
  BackendDbSecret:
    Type: String
  AppName:                      
    Type: String
  Environment:                  
    Type: String

Resources:
  ## Artifact Bucket
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket
    # BucketName: !Sub "${AppName}-${Environment}-artifact-s3"
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:                        
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-artifact-s3"
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref Environment
    DeletionPolicy: Retain

  ## CodePipeline Role (shared for FE + BE)
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Environment}-codepipeline-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Tags:                        
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-codepipeline-role"
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref Environment
      Policies:
        - PolicyName: CodePipelineMinimal
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3Artifacts
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectVersionAcl
                Resource: "arn:aws:s3:::*/*"
              - Sid: CodeStarConnection
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                  - codeconnections:UseConnection
                Resource: !Ref GitHubConnectionArn
              - Sid: TriggerCodeDeployCore
                Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:StopDeployment
                  - codedeploy:GetDeploymentGroup
                  - codedeploy:GetApplication
                  - codedeploy:GetDeploymentTarget
                  - codedeploy:BatchGetDeploymentTargets
                  - codedeploy:RegisterApplicationRevision
                Resource:
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*"
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*"
              - Sid: TriggerCodeBuild
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*"

              # Actions that must remain wildcard (*) since AWS does not support resource-level restriction
              - Sid: TriggerCodeDeployWildcard
                Effect: Allow
                Action:
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:ListApplications
                  - codedeploy:ListDeploymentConfigs
                  - codedeploy:ListDeploymentGroups
                Resource: "*"
              - Sid: CloudFrontInvalidate
                Effect: Allow
                Action: cloudfront:CreateInvalidation
                Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/*"

  ## CodeBuild Role
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Environment}-codebuild-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Tags:                          
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-codebuild-role"
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref Environment
      Policies:
        - PolicyName: CodeBuildMinimal
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Sid: S3Artifacts
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${PipelineArtifactBucket}/*"
              - Sid: CloudFrontInvalidate
                Effect: Allow
                Action: cloudfront:CreateInvalidation
                Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/*"

  ## CodeDeploy Service Role
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Environment}-codedeploy-role" 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Tags:                          
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-codedeploy-role"
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref Environment
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  ## EC2 Instance Role
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Environment}-ec2-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Tags:                          
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-ec2-role"
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref Environment
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref BackendDbSecret

  ## Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AppName}-${Environment}-ec2-instanceprofile" 
      Roles:
        - !Ref EC2InstanceRole
      Tags:                          
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-ec2-instanceprofile"
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref Environment

Outputs:
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn
  CodeDeployServiceRoleArn:
    Value: !GetAtt CodeDeployServiceRole.Arn
  EC2InstanceProfileName:
    Value: !Ref EC2InstanceProfile
  PipelineArtifactBucketName:
    Value: !Ref PipelineArtifactBucket
