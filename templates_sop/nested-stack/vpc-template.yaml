# vpc-template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Simple custom VPC with 2 public subnets (AZ-aware).
  This is intended as the first, small step for the TODO app infra.

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR for public subnet (AZ 1)
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR for public subnet (AZ 2)
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.10.0/24
    Description: CIDR for private subnet (AZ 1)
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.11.0/24
    Description: CIDR for private subnet (AZ 2)
  Environment:
    Type: String
    Default: dev
    Description: Environment tag (dev|staging|prod)
  AppName:                    
    Type: String
    Default: todo
    Description: Application short name (used in naming convention)

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-network-vpc' 
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-network-igw' 
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-public-rt'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-public-subnet-1'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-public-subnet-2'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  # --- Private Subnets ---
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-private-subnet-1'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-private-subnet-2'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-network-natgw-eip" 
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1   # NAT Gateway only in AZ1
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-network-natgw" 
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  # One Private Route Table for both subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${Environment}-private-rt"  
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      # GatewayId: !Ref InternetGateway

  # Associate BOTH private subnets with the same route table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref VPC

  PublicSubnetIds:
    Description: Comma-separated public subnet ids (AZ1,AZ2)
    Value: !Join [ ',', [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]

  PublicSubnet1:
    Description: Public subnet 1 id
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public subnet 2 id
    Value: !Ref PublicSubnet2

  PrivateSubnetIds:
    Description: Comma-separated private subnet ids (AZ1,AZ2)
    Value: !Join [ ',', [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]

  PrivateSubnet1:
    Description: Private subnet 1 id
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private subnet 2 id
    Value: !Ref PrivateSubnet2
