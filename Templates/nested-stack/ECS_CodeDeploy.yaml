AWSTemplateFormatVersion: '2010-09-09'
Description: Node.js Docker CI/CD pipeline with ECS + ALB + CodeDeploy (Blue/Green)

Parameters:
  GitHubConnectionArn:
    Type: String
    Description: CodeStar connection ARN for GitHub
    Default: arn:aws:codeconnections:ap-south-1:127145910156:connection/1db5596b-8712-48b6-aad2-062695c51177
  GitHubRepo:
    Type: String
    Description: GitHub repository name (owner/repo)
    Default: Jaymin-PCA240/Docker-NodeJS-EC2
  GitHubBranch:
    Type: String
    Default: main
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  ECSClusterName:
    Type: String
    Default: NodeAppCluster
  ContainerName:
    Type: String
    Default: nodejs

Resources:

  ###### S3 Bucket for CodePipeline (auto-unique) ######
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket

  ###### ECR Repository ######
  NodeAppECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: nodejs-docker-app

  ###### ALB Security Group ######
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  ###### ALB ######
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSG
      Scheme: internet-facing
      Type: application

  ###### ALB Target Group ######
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: 3000
      HealthCheckPath: /

  ###### ALB Listener ######
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  ###### ECS Cluster ######
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  ###### ECS Task Execution Role ######
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ###### CodeBuild Role ######
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ###### CodePipeline Role ######
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource: !Sub arn:aws:s3:::${PipelineArtifactBucket}/*
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:*
                  - codedeploy:*
                  - iam:PassRole
                Resource: "*"

  ###### CodeBuild Project ######
  NodeAppBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: NodeAppBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO
            Value: !Ref NodeAppECR
          - Name: AWS_REGION
            Value: !Ref "AWS::Region"
      Source:
        Type: CODEPIPELINE

  ###### ECS Service ######
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: nodejs-service
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref PublicSubnets
          SecurityGroups:
            - !Ref ALBSG
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup

  ###### CodeDeploy Role (inline policy) ######
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployECSInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:UpdateService
                  - ecs:RegisterTaskDefinition
                  - elasticloadbalancing:*
                  - cloudwatch:*
                  - iam:PassRole
                Resource: "*"

  ###### CodeDeploy Application ######
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: NodeAppCodeDeploy
      ComputePlatform: ECS

  ###### CodeDeploy Deployment Group ######
  CodeDeployDG:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: NodeAppDeploymentGroup
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        GreenFleetProvisioningOption:
          Action: DISCOVER_EXISTING
      ECSService:
        ClusterName: !Ref ECSCluster
        ServiceName: !Ref ECSService

  ###### CodePipeline ######
  NodeAppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: NodeAppPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubBranch
                DetectChanges: true
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref NodeAppBuild
        - Name: Deploy
          Actions:
            - Name: ECSBlueGreenDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployDG
                TaskDefinitionTemplateArtifact: BuildOutput
                TaskDefinitionTemplatePath: "taskdef.json"
                ContainerName: !Ref ContainerName
                Image1Name: !Ref ContainerName

Outputs:

  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt AppLoadBalancer.DNSName

  ArtifactBucketName:
    Description: Name of the S3 Artifact Bucket
    Value: !Ref PipelineArtifactBucket
