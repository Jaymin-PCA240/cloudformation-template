AWSTemplateFormatVersion: "2010-09-09"
Description: ALB with AutoScalingGroup (2 instances by default) in default VPC subnets

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 KeyPair for SSH access

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Description: EC2 instance type

  DefaultVPC:
    Type: AWS::EC2::VPC::Id
    Description: Select default VPC

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First default public subnet (AZ A)

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Second default public subnet (AZ B)

  DesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired number of instances in the AutoScaling group (>= min size)

Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-0eab6d73b98b38574
    us-east-1:
      AMI: ami-08c40ec9ead489470

Resources:
  ### ALB Security Group (allow client HTTP)
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ALB
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ### Instance Security Group (allow SSH from anywhere; HTTP only from ALB SG)
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP from ALB
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        # SSH open (for demo). In production restrict to your IP/CIDR.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTP only from ALB security group
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG

  ### Target Group (no static Targets; ASG will register instances)
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-tg"
      VpcId: !Ref DefaultVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"

  ### ALB (internet-facing)
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Scheme: internet-facing
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSG
      Type: application

  ### Listener (HTTP:80)
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ALB
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ### Launch Template (defines how instances are launched by ASG)
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-lt"
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref InstanceSG
        UserData: !Base64 |
          #!/bin/bash
          # ensure we're root
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl enable httpd
          sudo systemctl start httpd
          # include instance id and private & public IP in page
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "no-public-ip")
          echo "<html><body><h1>Instance: ${INSTANCE_ID}</h1><p>Private IP: ${PRIVATE_IP}</p><p>Public IP: ${PUBLIC_IP}</p></body></html>" | sudo tee /var/www/html/index.html

  ### Auto Scaling Group
  WebASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - TargetGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-web"
          PropagateAtLaunch: true

    ### Target Tracking Scaling Policy
  WebASGTargetTrackingCPU:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebASG
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 60
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
        DisableScaleIn: false

Outputs:
  ALBEndpoint:
    Description: ALB DNS name (use in browser)
    Value: !Join ["", ["http://", !GetAtt ALB.DNSName]]

  ASGName:
    Description: Auto Scaling Group name
    Value: !Ref WebASG

  LaunchTemplateId:
    Description: Launch Template ID
    Value: !Ref WebLaunchTemplate

  InstanceSecurityGroupId:
    Description: Instance Security Group ID (for reference)
    Value: !Ref InstanceSG

  ALBSecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref ALBSG
