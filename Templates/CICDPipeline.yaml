AWSTemplateFormatVersion: "2010-09-09"
Description: CI/CD Pipeline - GitHub (CodeStar Connection) -> ECR -> EC2 via CodeDeploy

Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub repository owner
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch to build
  GitHubConnectionArn:
    Type: String
    Description: ARN of the existing CodeStar GitHub connection
  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of existing EC2 KeyPair

Resources:
  #### ECR Repository ####
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "myapp-repo"

  #### EC2 Instance for Deployment ####
  DeploymentInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy

  DeploymentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DeploymentInstanceRole

  DeploymentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      # VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  DeploymentInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref EC2KeyPair
      # SubnetId: !Ref PublicSubnet1
      ImageId: ami-0eab6d73b98b38574 # Amazon Linux 2 (Mumbai)
      IamInstanceProfile: !Ref DeploymentInstanceProfile
      SecurityGroupIds:
        - !Ref DeploymentSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Node.js
          curl -sL https://rpm.nodesource.com/setup_16.x | sudo bash -
          sudo yum install -y nodejs

          # PM2
          sudo npm install -g pm2

          # CodeDeploy Agent
          sudo yum update -y
          sudo yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto
          sudo service codedeploy-agent start


          sudo dnf install -y docker

          sudo systemctl enable docker
          sudo systemctl start docker

          sudo usermod -aG docker ec2-user

  #### CodeDeploy Application & Deployment Group ####
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: !Sub "${GitHubRepo}-dg"
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      Ec2TagFilters:
        - Key: Name
          Value: DeploymentInstance
          Type: KEY_AND_VALUE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce

  #### CodeBuild Project ####
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${GitHubRepo}-build"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 30

  #### CodePipeline ####
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeConnectionsUsage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codeconnections:UseConnection
                Resource:
                  - !Ref GitHubConnectionArn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess
        - arn:aws:iam::aws:policy/AWSCodeStarFullAccess

  PipelineBucket:
    Type: AWS::S3::Bucket

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Sub "${GitHubOwner}/${GitHubRepo}"
                BranchName: !Ref GitHubBranch
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployGroup

Outputs:
  ECRRepoURI:
    Value: !GetAtt ECRRepo.RepositoryUri
  EC2PublicIP:
    Value: !GetAtt DeploymentInstance.PublicIp
